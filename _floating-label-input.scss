// Selectors
$input: '.input' !default;
$label: '.label' !default;
$invalid: ':invalid' !default;
$prefix: none !default;
$suffix: none !default;

// The height of the input. Doesn't apply to textareas.
$height: 48px !default;

// The height of
$small-label-height: $height / 2 !default;

// The style of the border in its default state.
// (radius is ignored if $border-style is 'underline'.)
$border-size: 2px !default;
$border-size-focused: $border-size !default;
$border-radius: 6px !default;
$border-color: #abc !default;

// 'box' | 'underline'
$border-style: 'box' !default;

// Colors in its alternate states
$border-color-focused: dodgerblue !default;
$border-color-invalid: #e68 !default;

// Label style
$label-color: #789 !default;
$label-color-large: $label-color !default;
$label-color-large-invalid: $label-color-large !default;
$label-color-small: $label-color !default;
$label-color-focused: $border-color-focused !default;
$label-color-invalid: $border-color-invalid !default;

// Set this to false to disable the red invalid outline
$style-invalid: true !default;

// How much to displace the label (vertically) in "small" mode.
$label-displacement: 0 !default;

// Padding for the left and right sides of the input box.
$horizontal-padding: 12px !default;

// The speed of the transition.
$speed: 75ms !default;
$timing-function: ease-in-out !default;

// Padding for the top and bottom sides of a textarea.
// Only applies to text areas.
$textarea-padding: 16px !default;

// Size of the label in small mode.
$font-size-small: 0.86em !default;

// Approximate color of the body behind the input.
// This won't be a solid background behind the input box !default;
// but just a small "patch" that's $border-size high.
$body-background: white !default;

// Amount of extra height on the label "background cover".
$cover-allowance: 2px !default;

// How many pixels to nudge the label upward in small mode.
$small-label-vertical-offset: $label-displacement;

$horizontal-border-size: 0;

@if ($border-style == 'box') {
  $small-label-vertical-offset: -1 *
    $small-label-height /
    2 +
    $label-displacement;

  $horizontal-border-size: $border-size;
}

@if ($prefix != none) and ($suffix == none) {
  $suffix: '.suffix';
  @warn "$prefix was specified but $suffix was not; assuming '.suffix'";
}

@if ($suffix != none) and ($prefix == none) {
  $prefix: '.prefix';
  @warn "$suffix was specified but $prefix was not; assuming '.prefix'";
}

& {
  display: inline-flex;
  position: relative;
}

&,
> #{$input},
> #{$label} {
  box-sizing: border-box;
  cursor: text;
}

@if ($prefix != none) {
  > #{$prefix},
  > #{$suffix} {
    color: $border-color;
    line-height: $height;
    flex: 0 0 auto;
    pointer-events: none;
    transition: opacity $speed linear, color $speed linear;
  }

  > #{$prefix} {
    padding-left: $horizontal-padding;
  }

  > #{$suffix} {
    padding-right: $horizontal-padding;
  }

  &:focus-within > #{$prefix},
  &:focus-within > #{$suffix} {
    color: $border-color-focused;
    transition: opacity $speed linear, color ($speed / 4) linear;
  }
}

// Border
&::before {
  content: '';
  display: block;
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  transition: border-color $speed linear;
  @if ($border-style == 'box') {
    border: solid $border-size $border-color;
    border-radius: $border-radius;
  }
  @if ($border-style == 'underline') {
    border-bottom: solid $border-size $border-color;
  }
}

&:focus-within::before {
  @if ($border-style == 'box') {
    border-width: $border-size-focused;
  }
  @if ($border-style == 'underline') {
    border-bottom-width: $border-size-focused;
  }
}

// Invalid ring
&#{$invalid}:not(:focus-within)::before {
  border-color: $border-color-invalid;
}

// Focus ring
&:focus-within::before {
  border-color: $border-color-focused;
  transition: border-color ($speed / 4) linear;
}

// The label text (default is in big mode)
> #{$label} {
  position: absolute;
  top: 0;
  height: $height;
  max-width: 100%;
  left: 0;
  // prettier-ignore
  transition:
    color $speed linear,
    background $speed $timing-function,
    line-height $speed $timing-function,
    transform $speed $timing-function,
    font-size $speed $timing-function;
  background: transparent;
  z-index: 2;
  cursor: text;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

@if ($prefix != none) {
  > #{$prefix},
  > #{$suffix} {
    transition: opacity $speed linear;
  }
}

// Input reset
> #{$input} {
  margin: 0;
  padding: 0 $horizontal-padding;
  border: 0;
  background: transparent;
  min-height: $height;
  position: relative;
  z-index: 1;
  transition: opacity $speed $timing-function,
    box-shadow $speed $timing-function;
  width: 100%;

  @if ($border-style == 'box') {
    // Border radius doesn't make sense in underline mode
    border-radius: $border-radius;
  }
}

// Single-line inputs (eg, not `<textarea>`)
> input#{$input} {
  // For single-line inputs, set the `line-height`.
  // This dictates the overall height of the entire input
  // field. This won't apply for multi-line inputs
  // (textarea), which will be sized using padding.
  line-height: $height;
}

// Multi-line inputs (eg, not `<input>`)
> textarea#{$input} {
  padding-top: $textarea-padding;
  padding-bottom: $textarea-padding;
  resize: vertical;
}

// Remove the default browser focus ring
> #{$input}:focus {
  outline: 0;
}

// Invalid
> #{$input}#{$invalid},
&#{$invalid} > #{$input} {
  // Cancel the default styling of invalid fields;
  // we'll style them later in :invalid:not(:focus).
  outline: 0;
  box-shadow: none;
}

@if ($style-invalid != true) {
  & > #{$input}#{$invalid}:not(:focus),
  &#{$invalid} > #{$input}:not(:focus) {
    // Prevent the textbox from turning red while typing.
    // This can happen in email input boxes, where typing a partial
    // email address (without @) causes :invalid to be triggered.
    outline: 0;
    border: 0;

    @if ($border-style == 'box') {
      box-shadow: inset 0 0 0 $border-size $border-color-invalid;
    }
    @if ($border-style == 'underline') {
      box-shadow: inset 0 (-1 * $border-size) 0 $border-color-invalid;
    }
  }
}

&#{$invalid} > #{$input}:not(:focus) + #{$label},
& > #{$input}#{$invalid}:not(:focus) + #{$label} {
  color: $label-color-invalid;
}

&:focus-within > #{$label} {
  color: $label-color-focused;
}

> #{$input}:placeholder-shown:not(:focus),
> #{$input}:placeholder-shown:not(:focus) ~ #{$suffix} {
  // Hide input when label is shown.
  // Hide the suffix, too!
  opacity: 0;
}

// Small label ("up there")
> #{$label} {
  box-sizing: border-box;
  line-height: $border-size;
  padding: 0 ($horizontal-padding + $horizontal-border-size * 2);
  font-size: $font-size-small;
  color: $label-color-small;
  z-index: 5;
  line-height: $small-label-height;
  transform: translate3d(0, $small-label-vertical-offset, 0);

  // This will be set to the border size in "big" mode
  margin-top: 0;

  // Prevent wrapping
  white-space: nowrap;

  // Usually not needed
  text-align: left;
}

// Big label ("down there")
& > #{$input}:placeholder-shown:not(:focus) ~ #{$label} {
  line-height: $height - $border-size * 2;
  margin-top: $border-size;
  font-size: 1em;
  background: transparent;
  color: $label-color-large;
  transform: translate3d(0, 0, 0);
}

// Background cover (default to small mode)
// This is the little white strip behind teh label text
> #{$label}::before {
  content: '';
  position: absolute;
  display: block;
  left: $border-size-focused + $horizontal-padding / 2;
  right: $border-size-focused + $horizontal-padding / 2;
  top: 0;
  height: $border-size-focused + $cover-allowance * 2;
  background: $body-background;
  z-index: -1;
  opacity: 1;
  transform: translate3d(
    0,
    -1 * $small-label-vertical-offset - $cover-allowance,
    0
  );
  transition: transform $speed $timing-function;
}

// Cover, in big mode
& > #{$input}:placeholder-shown:not(:focus) ~ #{$label}:before {
  transform: translate3d(0, 0, 0);
  opacity: 0;

  @if ($prefix != none) {
    opacity: 1;
    height: $height - $border-size * 2;
  }
}

// Big label - always keep the same color, even if it's invalid
& > #{$input}#{$invalid}:placeholder-shown:not(:focus) ~ #{$label},
&#{$invalid} > #{$input}:placeholder-shown:not(:focus) ~ #{$label} {
  color: $label-color-large-invalid;
}

& > #{$input}::placeholder {
  color: $label-color-large;
}
